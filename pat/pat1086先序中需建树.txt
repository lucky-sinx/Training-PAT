#include<bits/stdc++.h>
using namespace std;
vector<int> inorder,preorder;
stack<int> a;
bool flag=true;
struct tree
{
    int data;
    tree *l,*r;
    tree(int d):data(d),l(NULL),r(NULL){}
};
int Find(int x)
{
    for(int i=0;i<inorder.size();i++)
        if(inorder[i]==x)return i;
    return -1;
}
void buildtree(tree *&t,int l1,int r1,int l2,int r2)
{
//    cout<<l1<<' '<<r1<<' '<<l2<<' '<<r2<<endl;
    if(l1>r1||l2>r2)return;
    t=new tree(preorder[l1]);
    int position=Find(t->data);
//    cout<<position<<endl;
    if(position==-1)return;
    buildtree(t->l,l1+1,l1+position-l2,l2,position-1);
    buildtree(t->r,l1+position-l2+1,r1,position+1,r2);
}
void postorder(tree *t)
{
    if(!t)return;
    postorder(t->l);postorder(t->r);
    if(flag){cout<<t->data;flag=false;}
    else cout<<' '<<t->data;
}
int main()
{
    int n;cin>>n;
    int k=2*n;
    while(k--)
    {
        string s;cin>>s;
        if(s=="Push")
        {
            int x;cin>>x;
            a.push(x);
            preorder.push_back(x);
        }
        else
        {
            inorder.push_back(a.top());
            a.pop();
        }
    }
//    for(int i=0;i<n;i++)cout<<preorder[i]<<' ';cout<<endl;
//    for(int i=0;i<n;i++)cout<<inorder[i]<<' ';cout<<endl;
    tree *t=NULL;
    buildtree(t,0,n-1,0,n-1);
    postorder(t);
}
