#include<bits/stdc++.h>
#include<map>
using namespace std;
const int N=1e4+5;
int n;
vector<int> hobbies[N];
int father[N];
int weight[N];
void init()
{
    for(int i=0;i<n;i++)
    {
        father[i]=i;
        weight[i]=0;
    }
}
int Find(int x)
{
    if(x==father[x])return x;
    else return Find(father[x]);
}
void Union(int x,int y)
{
    x=Find(x),y=Find(y);
    if(x!=y)
    {
        if(weight[x]>weight[y])father[y]=x;
        else if(weight[y]>weight[x])father[x]=y;
        else{
            father[x]=y;
            weight[y]++;
        }
    }
}
int main()
{
    cin>>n;
    init();
    for(int i=0;i<n;i++)
    {
        int k;
        scanf("%d:",&k);
        while(k--)
        {
            int no;cin>>no;
            hobbies[no].push_back(i);
        }
    }
//    for(int i=0;i<10;i++)
//    {
//        cout<<i<<':';
//        for(int j=0;j<hobbies[i].size();j++)
//            cout<<hobbies[i][j]<<' ';
//        cout<<endl;
//    }
    for(int i=1;i<=1000;i++)
    {
        if(hobbies[i].size()>=2)
        {
            int from=hobbies[i][0];
            for(int j=1;j<hobbies[i].size();j++)
            {
                int to=hobbies[i][j];
                Union(from,to);
//                cout<<from<<' '<<to<<endl;
            }
        }
    }
//    for(int i=0;i<n;i++)cout<<Find(i)<<' ';
//    cout<<endl;

    int cnt=0;
    int mape[N];
    memset(mape,0,sizeof(mape));
    for(int i=0;i<n;i++)
    {
        int type=Find(i);
        if(mape[type]==0)cnt++;
        mape[type]++;
    }
    sort(mape,mape+N);
    cout<<cnt<<endl;
    for(int i=0;i<cnt;i++)
    {
        if(i!=0)cout<<' ';
        cout<<mape[N-1-i];
    }
}

