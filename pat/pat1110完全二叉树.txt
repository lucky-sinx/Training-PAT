#include<bits/stdc++.h>
using namespace std;
const int N=21;
bool isroot[N];
struct node{
    int left;
    int right;
    int no;
    int i;
};
bool cmp(node x,node y)
{
    return x.no<y.no;
}
node tree[N];
int n;
int root=-1;
int max_no=-1;
int getdepth(int root)
{
    if(root==-1)return 0;
    else return max(getdepth(tree[root].left),getdepth(tree[root].right))+1;
}
bool isBST(int root)
{
    if(root==-1)return true;
    int x=getdepth(tree[root].left)-getdepth(tree[root].right);
    if(x<-1||x>1)return false;
    else
        return isBST(tree[root].left)&&isBST(tree[root].right);
}
void dfs(int root,int no)
{
    if(root==-1)return;
    max_no=max(max_no,no);
    tree[root].no=no;
    dfs(tree[root].left,2*no+1);
    dfs(tree[root].right,2*no+2);
}
int main()
{
    cin>>n;
    fill(isroot,isroot+n,true);
    for(int i=0;i<n;i++)
    {
        string s1,s2;cin>>s1>>s2;
        if(s1=="-")tree[i].left=-1;
        else sscanf(s1.c_str(),"%d",&tree[i].left);
        if(s2=="-")tree[i].right=-1;
        else sscanf(s2.c_str(),"%d",&tree[i].right);
//        cout<<tree[i].left<<' '<<tree[i].right<<endl;
        isroot[tree[i].left]=isroot[tree[i].right]=false;
        tree[i].i=i;
    }
    for(int i=0;i<n;i++)if(isroot[i]){root=i;break;}
//    bool isbst=isBST(root);
//    if(isbst)cout<<"YES"<<endl;
//    else cout<<"NO"<<endl;
    dfs(root,0);
    if(max_no==n-1)
    {
        cout<<"YES ";
        sort(tree,tree+n,cmp);
        cout<<tree[n-1].i;
    }
    else cout<<"NO "<<root<<endl;
}
