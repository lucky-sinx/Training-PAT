#include<bits/stdc++.h>
using namespace std;
const int N=1e4+5;
int n,m;
vector<int> pictures[N];
int father[N];
int height[N];
void init()
{
    for(int i=0;i<N;i++)
    {
        father[i]=-1;
        height[i]=0;
    }
}
int Find(int x)
{
    return father[x]==x?x:Find(father[x]);
}
void Union(int x,int y)
{
    x=Find(x),y=Find(y);
    if(x!=y)
    {
        if(height[x]>height[y])father[y]=x;
        else if(height[y]>height[x])father[x]=y;
        else {father[x]=y;height[y]++;}
    }
}
int main()
{
    cin>>n;
    init();
    for(int i=0;i<n;i++)
    {
        int k;cin>>k;
        while(k--)
        {
            int no;cin>>no;
            pictures[i].push_back(no);
            father[no]=no;
        }
    }
    for(int i=0;i<n;i++)
    {
        if(pictures[i].size()>=2)
            for(int j=1;j<pictures[i].size();j++)
                Union(pictures[i][0],pictures[i][j]);
    }
    int tree_cnt,bird_cnt;
    tree_cnt=bird_cnt=0;
    for(int i=0;i<N;i++)
    {
        if(father[i]==-1)continue;
        bird_cnt++;
        if(father[i]==i)tree_cnt++;
    }
    cout<<tree_cnt<<' '<<bird_cnt<<endl;
    cin>>m;
    int x,y;
    while(m--)
    {
        cin>>x>>y;
        if(Find(x)==Find(y))cout<<"Yes"<<endl;
        else cout<<"No"<<endl;
    }
}
