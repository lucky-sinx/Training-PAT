#include<bits/stdc++.h>
using namespace std;
const int N=505;
int n,m;
int degree[N]={0};
int father[N];
int height[N];
void init()
{
    for(int i=0;i<N;i++)
    {
        father[i]=i;
        height[i]=0;
    }
}
int Find(int x)
{
    return father[x]==x?x:Find(father[x]);
}
void Union(int x,int y)
{
    x=Find(x),y=Find(y);
    if(x!=y)
    {
        if(height[x]>height[y])father[y]=x;
        else if(height[x]<height[y])father[x]=y;
        else {father[x]=y;height[y]++;}
    }
}
int main()
{
    cin>>n>>m;
    init();
    for(int i=0;i<m;i++)
    {
        int x,y;cin>>x>>y;
        degree[x]++;
        degree[y]++;
        Union(x,y);
    }
    int odd_cnt=0,g_cnt=0;
    for(int i=1;i<=n;i++)
    {
        if(degree[i]%2!=0)odd_cnt++;
        if(father[i]==i)g_cnt++;
    }
    int type=-1;
    if(g_cnt>1)type=0;
    else if(g_cnt==1)
    {
        if(odd_cnt==0)type=1;
        else if(odd_cnt==2)type=2;
        else type=0;
    }
    for(int i=1;i<=n;i++)
    {
        if(i!=1)cout<<' ';
        cout<<degree[i];
    }
    cout<<endl;
    if(type==0)cout<<"Non-Eulerian"<<endl;
    else if(type==1)cout<<"Eulerian"<<endl;
    else if(type==2)cout<<"Semi-Eulerian"<<endl;
}
