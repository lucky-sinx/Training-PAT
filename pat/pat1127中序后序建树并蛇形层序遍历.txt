#include<bits/stdc++.h>
using namespace std;
const int N=31;
int postorder[N],inorder[N];
int n;
typedef struct node
{
    int data;
    node *lchild,*rchild;
    node(int d):data(d),lchild(0),rchild(0){}
}tree;
int Find(int x)
{
    for(int i=0;i<n;i++)
        if(inorder[i]==x)return i;
}
void build(tree *&t,int l1,int r1,int l2,int r2)
{
//    cout<<l1<<' '<<r1<<' '<<l2<<' '<<r2<<endl;
    if(l1>r1||l2>r2)return;
    int root=postorder[r2];
    int position=Find(root);
    t=new node(root);
    build(t->lchild,l1,position-1,l2,l2+position-l1-1);
    build(t->rchild,position+1,r1,l2+position-l1,r2-1);
}
void in(tree *t)
{
    if(!t)return;
    in(t->lchild);
    cout<<t->data<<' ';
    in(t->rchild);
}
void post(tree *t)
{
    if(!t)return;
    post(t->lchild);
    post(t->rchild);
    cout<<t->data<<' ';
}
int main()
{
    cin>>n;
    tree *t=0;
    for(int i=0;i<n;i++)
        cin>>inorder[i];
    for(int i=0;i<n;i++)
        cin>>postorder[i];
    build(t,0,n-1,0,n-1);
//    cout<<endl;in(t);cout<<endl;post(t);
    queue<node *> q;
    vector<node *>v;
    vector<int> display;
    q.push(t);
    bool flag=false;
    while(!q.empty())
    {
        v.clear();
//        cout<<q.size()<<endl;
        while(!q.empty())
        {
            v.push_back(q.front());
            q.pop();
        }
        if(!flag)
        {
            for(int i=0;i<v.size();i++)
            {
                display.push_back(v[i]->data);
                if(v[v.size()-1-i]->lchild)q.push(v[v.size()-1-i]->lchild);
                if(v[v.size()-1-i]->rchild)q.push(v[v.size()-1-i]->rchild);
            }
        }
        else
        {
            for(int i=0;i<v.size();i++)
            {
                display.push_back(v[i]->data);
                if(v[v.size()-1-i]->rchild)q.push(v[v.size()-1-i]->rchild);
                if(v[v.size()-1-i]->lchild)q.push(v[v.size()-1-i]->lchild);
            }
        }
        flag=!flag;
    }
    for(int i=0;i<n;i++)
    {
        if(i!=0)cout<<' ';
        cout<<display[i];
    }
}
