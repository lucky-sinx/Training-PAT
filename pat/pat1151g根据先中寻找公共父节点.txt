#include<bits/stdc++.h>
using namespace std;
const int N=10005;
int n;
int pre[N];
int in[N];
map<int,int> mp;
void lca(int l,int r,int root,int a,int b)
{
    if(l>r)return;
    int inroot=mp[pre[root]],ina=mp[a],inb=mp[b];
    if(ina<inroot&&inb<inroot)
        lca(l,inroot-1,root+1,a,b);
    else if((ina<inroot&&inb>inroot)||(ina>inroot&&inb<inroot))
        printf("LCA of %d and %d is %d.\n", a, b, in[inroot]);
    else if(ina>inroot&&inb>inroot)
        lca(inroot+1,r,root+inroot-l+1,a,b);
    else if(ina==inroot)
        printf("%d is an ancestor of %d.\n", a, b);
    else if(inb==inroot)
        printf("%d is an ancestor of %d.\n", b, a);
}
int main()
{
    int m,n,a,b;
    cin>>m>>n;
    for(int i=1;i<=n;i++)
    {
        cin>>in[i];
        mp[in[i]]=i;
    }
    for(int i=1;i<=n;i++)cin>>pre[i];
    for(int i=0;i<m;i++)
    {
        cin>>a>>b;
        if(mp[a]==0&&mp[b]==0)
            printf("ERROR: %d and %d are not found.\n", a, b);
        else if(mp[a]==0||mp[b]==0)
            printf("ERROR: %d is not found.\n", mp[a] == 0 ? a : b);
        else lca(1,n,1,a,b);
    }
}
