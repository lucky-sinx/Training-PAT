#include<iostream>
#include<vector>
#include<queue>
using namespace std;
const int N=31;
typedef struct tree
{
    int val;
    tree *l,*r;
    tree(int v):val(v),l(NULL),r(NULL){}
}tree;
int post[N];
int in[N];
int k;
int Find(int x)
{
    for(int i=0;i<k;i++)
        if(in[i]==x)return i;
}
void build(tree *&t,int l1,int r1,int l2,int r2)
{
//    cout<<l1<<r1<<l2<<r2<<endl;
    if(l1>r1)return;
    int root=post[r1];
    t=new tree(root);
    int position=Find(root);
    build(t->l,l1,l1+position-l2-1,l2,position-1);
    build(t->r,l1+position-l2,r1-1,position+1,r2);
}
void postorder(tree *t)
{
    if(!t)return;
    postorder(t->l);
    postorder(t->r);
    cout<<t->val<<' ';
}
void inorder(tree *t)
{
    if(!t)return;
    inorder(t->l);
    cout<<t->val<<' ';
    inorder(t->r);
}
int main()
{
    cin>>k;
    for(int i=0;i<k;i++)cin>>post[i];
    for(int i=0;i<k;i++)cin>>in[i];
    tree *t;
    build(t,0,k-1,0,k-1);
//    postorder(t);cout<<endl;inorder(t);
    queue<tree *> q;
    if(t)q.push(t);
    bool flag=false;
//    cout<<t->l->val<<t->r->val<<endl;
    while(!q.empty())
    {
        tree *p=q.front();
        q.pop();
        if(!p)continue;
        if(!flag)
        {
            cout<<p->val;
            flag=true;
        }
        else
        {
            cout<<" "<<p->val;
        }
        q.push(p->l);q.push(p->r);
    }
}
