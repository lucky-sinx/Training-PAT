#include<iostream>
#include<algorithm>
#define NULL 0
using namespace std;
int n;
struct node
{
    int data;
    node *l,*r;
};
node *newnode(int x)
{
    node *nnode=new node;
    nnode->data=x;
    nnode->l=nnode->r=NULL;
    return nnode;
}
int height(node *t)
{
    if(t==NULL)return 0;
    else return max(height(t->l),height(t->r))+1;
}
int getbalance(node *t)
{
    if(!t)return 0;
    return height(t->l)-height(t->r);
}
void R(node *&t)
{
    node *temp=t->l;
    t->l=temp->r;
    temp->r=t;
    t=temp;
}
void L(node *&t)
{
    node *temp=t->r;
    t->r=temp->l;
    temp->l=t;
    t=temp;
}
void Insert(node *&t,int x)
{
    if(t==NULL){t=newnode(x);return;}
    if(x<t->data)
    {
        Insert(t->l,x);
        if(getbalance(t)==2)
        {
            int type=getbalance(t->l);
            if(type==1)R(t);
            else if(type==-1)
            {
                L(t->l);
                R(t);
            }
        }
    }
    else if(x>t->data)
    {
        Insert(t->r,x);
        if(getbalance(t)==-2)
        {
            int type=getbalance(t->r);
            if(type==-1)L(t);
            else if(type==1)
            {
                R(t->r);
                L(t);
            }
        }
    }
}
int main()
{
    cin>>n;
    node *t=NULL;
    while(n--)
    {
        int x;cin>>x;
        Insert(t,x);
    }
    cout<<t->data;
}
