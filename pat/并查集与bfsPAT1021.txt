#include<iostream>
#include<vector>
#include<queue>
#include<cstdio>
using namespace std;
const int N=100001;
vector<int> graph[N];
bool vis[N];
int depth[N];
int n;
struct node
{
    int no;
    int depth;
    node(int n,int d):no(n),depth(d){}
};
void bfs(int x)
{
    for(int i=0;i<=n;i++)vis[i]=false;
    queue<node> q;q.push(node(x,1));int cnt=0,maxdep=0;vis[x]=true;
    while(!q.empty())
    {
        node p=q.front();
        q.pop();
        maxdep=max(maxdep,p.depth);
        for(int i=0;i<graph[p.no].size();i++)
        {
            if(!vis[graph[p.no][i]])
            {
                vis[graph[p.no][i]]=true;
                q.push(node(graph[p.no][i],p.depth+1));
            }
        }
    }
    depth[x]=maxdep;
}

int height[N];
int father[N];
int component_cnt;
int Find(int x)
{
    if(father[x]==x)return x;
    else return Find(father[x]);
}
void Union(int x,int y)
{
    x=Find(x);y=Find(y);
    if(x!=y)
    {
        if(height[x]>height[y])father[y]=x;
        else if(height[y]>height[x])father[x]=y;
        else father[x]=y,height[y]++;
    }
}
void Init()
{
    for(int i=0;i<=n;i++)father[i]=i,height[i]=0;
}

bool isonecomponent()
{
    component_cnt=0;
    for(int i=1;i<=n;i++)
        if(father[i]==i)component_cnt++;
    return component_cnt==1;
}
int main()
{
    cin>>n;Init();
    for(int i=0;i<n-1;i++)
    {
        int x,y;cin>>x>>y;
        graph[x].push_back(y);
        graph[y].push_back(x);
        Union(x,y);
    }
//    for(int i=1;i<=n;i++)cout<<father[i]<<endl;
//    cout<<component_cnt<<endl;
    if(!isonecomponent())
        {printf("Error: %d components",component_cnt);return 0;}
    for(int i=1;i<=n;i++)
        bfs(i);
    int maxdepth=0;
    for(int i=1;i<=n;i++)maxdepth=max(maxdepth,depth[i]);
    for(int i=1;i<=n;i++)
        if(depth[i]==maxdepth)cout<<i<<endl;
}
