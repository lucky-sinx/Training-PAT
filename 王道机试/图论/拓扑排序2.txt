#include<vector>
#include<cstring>
#include<iostream>
#include<queue>
#include<climits>
using namespace std;
const int MAXN=501;
int indegree[MAXN];
vector<int> graph[MAXN];
vector<int> topologicalsort(int n)
{
    vector<int> res;
    priority_queue<int,vector<int>,greater<int> > pq;
    for(int i=1;i<=n;i++)
    {
        if(indegree[i]==0)
            pq.push(i);
    }
    while(!pq.empty())
    {
        int from=pq.top();
        pq.pop();
        res.push_back(from);
        for(int i=0;i<graph[from].size();i++)
        {
            int to=graph[from][i];
            indegree[to]--;
            if(indegree[to]==0)
                pq.push(to);
        }
    }
    return res;
}
int main()
{
    int n,m;
    while(cin>>n>>m)
    {
        memset(graph,0,sizeof(graph));
        memset(indegree,0,sizeof(indegree));
        while(m--)
        {
            int from,to;
            cin>>from>>to;
            graph[from].push_back(to);
            indegree[to]++;
        }
        vector<int>res=topologicalsort(n);
        for(int i=0;i<res.size();i++)
        {
            if(i==0)
                cout<<res[i];
            else
                cout<<" "<<res[i];
        }
        cout<<endl;
    }
}





